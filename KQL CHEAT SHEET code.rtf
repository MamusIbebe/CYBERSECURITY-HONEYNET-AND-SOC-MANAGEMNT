{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 # Windows Security Event Log\par
\par
```\par
// Failed Authentication (RDP, SMB)\par
SecurityEvent\par
| where EventID == 4625\par
| where TimeGenerated > ago(15m)\par
\par
// Authentication Success (RDP, SMB)\par
SecurityEvent\par
| where EventID == 4624\par
| where TimeGenerated > ago(15m)\par
\par
// Brute Force Attempt\par
SecurityEvent\par
| where EventID == 4625\par
| where TimeGenerated > ago(60m)\par
| summarize FailureCount = count() by SourceIP = IpAddress, EventID, Activity\par
| where FailureCount >= 10\par
\par
// Brute Force Success Windows\par
let FailedLogons = SecurityEvent\par
| where EventID == 4625 and LogonType == 3\par
| where TimeGenerated > ago(60m)\par
| summarize FailureCount = count() by AttackerIP = IpAddress, EventID, Activity, LogonType, DestinationHostName = Computer\par
| where FailureCount >= 5;\par
let SuccessfulLogons = SecurityEvent\par
| where EventID == 4624 and LogonType == 3\par
| where TimeGenerated > ago(60m)\par
| summarize SuccessfulCount = count() by AttackerIP = IpAddress, LogonType, DestinationHostName = Computer, AuthenticationSuccessTime = TimeGenerated;\par
SuccessfulLogons\par
| join kind = leftouter FailedLogons on DestinationHostName, AttackerIP, LogonType\par
| project AuthenticationSuccessTime, AttackerIP, DestinationHostName, FailureCount, SuccessfulCount\par
```\par
\par
# Windows Security Event Log (Malware & Firewall)\par
```\par
// Malware Detection\par
Event\par
| where EventLog == "Microsoft-Windows-Windows Defender/Operational"\par
| where EventID == "1116" or EventID == "1117"\par
\par
// Firewall Tamper Detection\par
Event\par
| where EventLog == "Microsoft-Windows-Windows Firewall With Advanced Security/Firewall"\par
| where EventID == 2003\par
```\par
\par
# Linux Syslog\par
\par
```\par
// Failed logon (ip address extract)\par
let IpAddress_REGEX_PATTERN = @"\\b\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\b";\par
Syslog\par
| where Facility == "auth"\par
| where SyslogMessage startswith "Failed password for"\par
| project TimeGenerated, SourceIP = extract(IpAddress_REGEX_PATTERN, 0, SyslogMessage), DestinationHostName = HostName, DestinationIP = HostIP, Facility, SyslogMessage, ProcessName, SeverityLevel, Type\par
\par
// Successful logon (ip address extract)\par
let IpAddress_REGEX_PATTERN = @"\\b\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\b";\par
Syslog\par
| where Facility == "auth"\par
| where SyslogMessage startswith "Accepted password for"\par
| project TimeGenerated, SourceIP = extract(IpAddress_REGEX_PATTERN, 0, SyslogMessage), DestinationHostName = HostName, DestinationIP = HostIP, Facility, SyslogMessage, ProcessName, SeverityLevel, Type\par
\par
// Brute Force Attempt Linux Syslog\par
let IpAddress_REGEX_PATTERN = @"\\b\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\b";\par
Syslog\par
| where Facility == "auth" and SyslogMessage startswith "Failed password for"\par
| where TimeGenerated > ago(1h)\par
| project TimeGenerated, AttackerIP = extract(IpAddress_REGEX_PATTERN, 0, SyslogMessage), DestinationHostName = HostName, DestinationIP = HostIP, Facility, SyslogMessage, ProcessName, SeverityLevel, Type\par
| summarize FailureCount = count() by AttackerIP, DestinationHostName, DestinationIP\par
| where FailureCount >= 5\par
\par
// Brute Force Success Linux\par
let FailedLogons = Syslog\par
| where Facility == "auth" and SyslogMessage startswith "Failed password for"\par
| where TimeGenerated > ago(1h)\par
| project TimeGenerated, SourceIP = extract(@"\\b\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\b", 0, SyslogMessage), DestinationHostName = HostName, DestinationIP = HostIP, Facility, SyslogMessage, ProcessName, SeverityLevel, Type\par
| summarize FailureCount = count() by AttackerIP = SourceIP, DestinationHostName\par
| where FailureCount >= 5;\par
let SuccessfulLogons = Syslog\par
| where Facility == "auth" and SyslogMessage startswith "Accepted password for"\par
| where TimeGenerated > ago(1h)\par
| project TimeGenerated, SourceIP = extract(@"\\b\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\.\\d\{1,3\}\\b", 0, SyslogMessage), DestinationHostName = HostName, DestinationIP = HostIP, Facility, SyslogMessage, ProcessName, SeverityLevel, Type\par
| summarize SuccessfulCount = count() by SuccessTime = TimeGenerated, AttackerIP = SourceIP, DestinationHostName\par
| where SuccessfulCount >= 1\par
| project DestinationHostName, SuccessfulCount, AttackerIP, SuccessTime;\par
let BruteForceSuccesses = SuccessfulLogons\par
| join kind = leftouter FailedLogons on AttackerIP, DestinationHostName;\par
BruteForceSuccesses\par
\par
// Queries the linux syslog for any user accounts created\par
// By @slendymayne (Discord)\par
Syslog\par
| where Facility == "authpriv" and SeverityLevel == "info"\par
| where SyslogMessage contains "new user" and SyslogMessage contains "shell=/bin/bash"\par
| project TimeGenerated, HostIP, HostName, ProcessID, SyslogMessage\par
\par
// Queries for any users given sudo privileges\par
// By @slendymayne (Discord)\par
Syslog\par
| where Facility == "authpriv" and SeverityLevel == "info"\par
| where SyslogMessage contains "to group 'sudo'"\par
| project TimeGenerated, HostIP, Computer, ProcessID, SyslogMessage\par
```\par
\par
# Azure Active Directory\par
\par
```\par
// View Mass AAD Auth Failures\par
SigninLogs\par
| where ResultDescription == "Invalid username or password or Invalid on-premise username or password."\par
| extend location = parse_json(LocationDetails)\par
| extend City = location.city, State = location.state, Country = location.countryOrRegion, Latitude = location.geoCoordinates.latitude, Longitude = location.geoCoordinates.longitude\par
| project TimeGenerated, ResultDescription, UserPrincipalName, AppDisplayName, IPAddress, IPAddressFromResourceProvider, City, State, Country, Latitude, Longitude\par
\par
// View Global Administrator Assignment\par
AuditLogs\par
| where OperationName == "Add member to role" and Result == "success"\par
| where TargetResources[0].modifiedProperties[1].newValue == '"Global Administrator"' or TargetResources[0].modifiedProperties[1].newValue == '"Company Administrator"' \par
| order by TimeGenerated desc\par
| project TimeGenerated, OperationName, AssignedRole = TargetResources[0].modifiedProperties[1].newValue, Status = Result, TargetResources\par
\par
// View Password Activities\par
AuditLogs\par
| where OperationName contains "password"\par
| order by TimeGenerated\par
\par
// Brute Force Success Azure Active Directory\par
let FailedLogons = SigninLogs\par
| where Status.failureReason == "Invalid username or password or Invalid on-premise username or password."\par
| where TimeGenerated > ago(1h)\par
| project TimeGenerated, Status = Status.failureReason, UserPrincipalName, UserId, UserDisplayName, AppDisplayName, AttackerIP = IPAddress, IPAddressFromResourceProvider, City = LocationDetails.city, State = LocationDetails.state, Country = LocationDetails.country, Latitude = LocationDetails.geoCoordinates.latitude, Longitude = LocationDetails.geoCoordinates.longitude\par
| summarize FailureCount = count() by AttackerIP, UserPrincipalName;\par
let SuccessfulLogons = SigninLogs\par
| where Status.errorCode == 0\par
| where TimeGenerated > ago(1h)\par
| project TimeGenerated, Status = Status.errorCode, UserPrincipalName, UserId, UserDisplayName, AppDisplayName, AttackerIP = IPAddress, IPAddressFromResourceProvider, City = LocationDetails.city, State = LocationDetails.state, Country = LocationDetails.country, Latitude = LocationDetails.geoCoordinates.latitude, Longitude = LocationDetails.geoCoordinates.longitude\par
| summarize SuccessCount = count() by AuthenticationSuccessTime = TimeGenerated, AttackerIP, UserPrincipalName, UserId, UserDisplayName;\par
let BruteForceSuccesses = SuccessfulLogons\par
| join kind = leftouter FailedLogons on AttackerIP, UserPrincipalName;\par
BruteForceSuccesses\par
| project AttackerIP, TargetAccount = UserPrincipalName, UserId, FailureCount, SuccessCount, AuthenticationSuccessTime\par
\par
// Excessive password Resets\par
AuditLogs\par
| where OperationName startswith "Change" or OperationName startswith "Reset"\par
| order by TimeGenerated\par
| summarize count() by tostring(InitiatedBy)\par
| project Count = count_, InitiatorId = parse_json(InitiatedBy).user.id, InitiatorUpn = parse_json(InitiatedBy).user.userPrincipalName, InitiatorIpAddress = parse_json(InitiatedBy).user.ipAddress\par
| where Count >= 10\par
\par
```\par
\par
# Azure Storage Account\par
\par
```\par
// Authorization Error\par
StorageBlobLogs\par
| where MetricResponseType endswith "Error"\par
| where StatusText == "AuthorizationPermissionMismatch"\par
| order by TimeGenerated asc\par
\par
// Reading a bunch of blobs\par
StorageBlobLogs\par
| where OperationName == "GetBlob"\par
\par
//Deleting a bunch of blobs (in a short time period)\par
StorageBlobLogs | where OperationName == "DeleteBlob"\par
| where TimeGenerated > ago(24h)\par
\par
//Putting a bunch of blobs (in a short time period)\par
StorageBlobLogs | where OperationName == "PutBlob"\par
| where TimeGenerated > ago(24h)\par
\par
//Copying a bunch of blobs (in a short time period)\par
StorageBlobLogs | where OperationName == "CopyBlob"\par
| where TimeGenerated > ago(24h)\par
```\par
\par
# Azure Key Vault\par
\par
```\par
// List out Secrets\par
AzureDiagnostics\par
| where ResourceProvider == "MICROSOFT.KEYVAULT"\par
| where OperationName == "SecretList"\par
\par
// Attempt to view passwords that don't exist\par
AzureDiagnostics\par
| where ResourceProvider == "MICROSOFT.KEYVAULT"\par
| where OperationName == "SecretGet"\par
| where ResultSignature == "Not Found"\par
\par
// Viewing an actual existing password\par
AzureDiagnostics\par
| where ResourceProvider == "MICROSOFT.KEYVAULT"\par
| where OperationName == "SecretGet"\par
| where ResultSignature == "OK"\par
\par
// Viewing a specific existing password\par
let CRITICAL_PASSWORD_NAME = "Tenant-Global-Admin-Password";\par
AzureDiagnostics\par
| where ResourceProvider == "MICROSOFT.KEYVAULT"\par
| where OperationName == "SecretGet"\par
| where id_s contains CRITICAL_PASSWORD_NAME\par
\par
// Updating a password Success\par
AzureDiagnostics\par
| where ResourceProvider == "MICROSOFT.KEYVAULT"\par
| where OperationName == "SecretSet"\par
\par
// Updating a specific existing password Success\par
let CRITICAL_PASSWORD_NAME = "Tenant-Global-Admin-Password";\par
AzureDiagnostics\par
| where ResourceProvider == "MICROSOFT.KEYVAULT"\par
| where OperationName == "SecretSet"\par
| where id_s endswith CRITICAL_PASSWORD_NAME\par
| where TimeGenerated > ago(2h)\par
\par
// Failed access attempts\par
AzureDiagnostics\par
| where ResourceProvider == "MICROSOFT.KEYVAULT"\par
| where ResultSignature == "Unauthorized"\par
\par
// Updating a specific existing secret in Key Vault\par
let CRITICAL_PASSWORD_NAME = "Tenant-Global-Admin-Password";\par
AzureDiagnostics\par
| where ResourceProvider == "MICROSOFT.KEYVAULT"\par
| where OperationName == "SecretSet"\par
| where id_s endswith CRITICAL_PASSWORD_NAME\par
```\par
\par
# Network Security Groups\par
\par
```\par
// Allowed inbound malicious flows\par
AzureNetworkAnalytics_CL\par
| where FlowType_s == "MaliciousFlow" and AllowedInFlows_d >= 1\par
| project TimeGenerated, FlowType = FlowType_s, IpAddress = SrcIP_s, DestinationIpAddress = DestIP_s, DestinationPort = DestPort_d, Protocol = L7Protocol_s, NSGRuleMatched = NSGRules_s, InboundFlowCount = AllowedInFlows_d\par
```\par
}
 